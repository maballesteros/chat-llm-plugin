/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ChatPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  apiKey: "",
  model: "gpt-4o"
};
var GPTService = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async fetchResponse(messages) {
    var _a, _b, _c;
    const apiKey = this.plugin.settings.apiKey;
    if (!apiKey) {
      new import_obsidian.Notice("Configura tu API Key en los ajustes del plugin.");
      return "Error: No API Key";
    }
    const payload = {
      model: this.plugin.settings.model,
      messages
    };
    console.log("GPTService: enviando a OpenAI payload:", payload);
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      },
      body: JSON.stringify(payload)
    });
    const data = await response.json();
    return ((_c = (_b = (_a = data.choices) == null ? void 0 : _a[0]) == null ? void 0 : _b.message) == null ? void 0 : _c.content) || "Error en la respuesta de OpenAI";
  }
};
var ChatPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.gptService = new GPTService(this);
    this.registerView("chat-panel", (leaf) => new ChatView(leaf, this));
    this.addRibbonIcon("message-square", "Open Chat", () => this.activateChatView());
    console.log("Agregando bot\xF3n de nota diaria!");
    this.addRibbonIcon("document", "Crear Nota Diaria", () => this.createDailyNote());
    this.addSettingTab(new ChatSettingTab(this.app, this));
    this.addCommand({
      id: "autocomplete-with-ai",
      name: "Autocompletar con IA",
      callback: () => this.autocompleteWithAI()
    });
  }
  /**
   * Obtiene el editor Markdown activo.
   */
  getActiveMarkdownEditor() {
    const markdownLeaf = this.app.workspace.getLeavesOfType("markdown").find((leaf) => leaf.containerEl.offsetParent !== null && leaf.view instanceof import_obsidian.MarkdownView);
    if (markdownLeaf) {
      return markdownLeaf.view.editor;
    }
    return null;
  }
  /**
   * Comando de autocompletar: obtiene el contenido actual del editor,
   * consulta a GPT y agrega la respuesta.
   */
  async autocompleteWithAI() {
    const editor = this.getActiveMarkdownEditor();
    if (!editor) {
      new import_obsidian.Notice("No se encontr\xF3 un editor activo.");
      return;
    }
    const cursor = editor.getCursor();
    const userText = editor.getRange({ line: 0, ch: 0 }, cursor).trim();
    if (!userText) {
      new import_obsidian.Notice("El editor est\xE1 vac\xEDo. Escribe algo antes de autocompletar.");
      return;
    }
    const messages = [
      { role: "system", content: "Eres un asistente IA que completa los textos que te env\xEDan los usuarios, respetando el estilo y tono previo. No dices nada m\xE1s, simplemente contin\xFAas el texto que te pasan." },
      { role: "user", content: userText }
    ];
    console.log("AutocompleteWithAI payload:", messages);
    const response = await this.gptService.fetchResponse(messages);
    if (!response || response.startsWith("Error")) {
      new import_obsidian.Notice("Hubo un problema obteniendo la respuesta de la IA.");
      return;
    }
    editor.replaceRange(`
${response}`, cursor);
    new import_obsidian.Notice("Texto autocompletado con IA.");
  }
  async activateChatView() {
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType("chat-panel")[0];
    if (!leaf) {
      leaf = workspace.getRightLeaf(false);
      await leaf.setViewState({ type: "chat-panel", active: true });
    }
    workspace.revealLeaf(leaf);
  }
  async createDailyNote() {
    const now = new Date();
    const year = now.getFullYear().toString();
    const month = String(now.getMonth() + 1).padStart(2, "0");
    const day = String(now.getDate()).padStart(2, "0");
    const yearFolder = year;
    const monthFolder = `${year}-${month}`;
    const dayFolder = `${year}-${month}-${day}`;
    const notePath = `${yearFolder}/${monthFolder}/${dayFolder}/${dayFolder}.md`;
    let file = this.app.vault.getAbstractFileByPath(notePath);
    if (!file) {
      try {
        await this.app.vault.adapter.mkdir(yearFolder);
      } catch (e) {
      }
      try {
        await this.app.vault.adapter.mkdir(`${yearFolder}/${monthFolder}`);
      } catch (e) {
      }
      try {
        await this.app.vault.adapter.mkdir(`${yearFolder}/${monthFolder}/${dayFolder}`);
      } catch (e) {
      }
      file = await this.app.vault.create(notePath, `# ${dayFolder}

`);
    }
    const leaf = this.app.workspace.getLeaf(true);
    await leaf.openFile(file);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ChatView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getViewType() {
    return "chat-panel";
  }
  getDisplayText() {
    return "Chat with GPT";
  }
  async onOpen() {
    this.render();
  }
  async onClose() {
  }
  async render() {
    this.containerEl.empty();
    const styleEl = this.containerEl.createEl("style");
    styleEl.setText(`
			.chat-messages {
				padding: 10px;
				overflow-y: auto;
				height: calc(100% - 100px);
				font-size: 14px;
			}
			.user-message-container {
				display: flex;
				justify-content: flex-end;
			}	
			.user-message, .bot-message {
				margin: 10px 0;
				padding: 10px;
				border-radius: 8px;
				line-height: 1.4;
				border: var(--input-border-width) solid var(--background-modifier-border);
			}
			.user-message {
				background-color: #d8fdd2;
				display: inline-block;
				max-width: 80%;
				word-wrap: break-word;
			}
			.bot-message {
				text-align: left;
				position: relative;
				padding: 0px 10px;
				background: var(--background-modifier-form-field);
			}
			.bot-message .transfer-button {
				position: absolute;
				top: 5px;
				right: 5px;
				background: transparent;
				border: none;
				cursor: pointer;
				opacity: 0;
				transition: opacity 0.3s;
				padding: 4px;
			}
			.bot-message:hover .transfer-button {
				opacity: 1;
			}
			.bot-message .transfer-button svg {
				width: 16px;
				height: 16px;
				fill: currentColor;
			}
			.chat-input-container {
				display: flex;
				align-items: center;
				padding: 10px;
				gap: 10px;
			}
			.chat-input {
				flex-grow: 1;
				padding: 8px;
				font-size: 13px;
				resize: none;
			}
			.chat-send-button {
				background: none;
				border: none;
				cursor: pointer;
				padding: 8px;
			}
			.chat-send-button svg {
				width: 24px;
				height: 24px;
				fill: currentColor;
			}
			.spinner {
				border: 4px solid rgba(0, 0, 0, 0.1);
				border-left-color: #767676;
				border-radius: 50%;
				width: 24px;
				height: 24px;
				animation: spin 1s linear infinite;
				margin: 0 auto;
			}
			@keyframes spin {
				to { transform: rotate(360deg); }
			}			
		`);
    this.messages = this.containerEl.createEl("div", { cls: "chat-messages" });
    const inputContainer = this.containerEl.createEl("div", { cls: "chat-input-container" });
    const input = inputContainer.createEl("textarea", {
      cls: "chat-input",
      attr: { placeholder: "Escribe un mensaje..." }
    });
    const sendButton = inputContainer.createEl("button", { cls: "chat-send-button", attr: { title: "Enviar" } });
    sendButton.innerHTML = `
			<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
			  <path d="M2 21l21-9L2 3v7l15 2-15 2z"/>
			</svg>
		`;
    sendButton.addEventListener("click", () => this.sendMessage(input.value));
    input.addEventListener("keypress", (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        this.sendMessage(input.value);
      }
    });
  }
  async sendMessage(userMessage) {
    if (!userMessage.trim())
      return;
    const inputEl = this.containerEl.querySelector(".chat-input");
    inputEl.value = "";
    const userMessageWrapper = this.messages.createEl("div", { cls: "user-message-container" });
    userMessageWrapper.createEl("div", { cls: "user-message", text: userMessage });
    const spinnerContainer = this.messages.createEl("div", { cls: "bot-message" });
    spinnerContainer.createEl("div", { cls: "spinner" });
    const editor = this.plugin.getActiveMarkdownEditor();
    let contextText = "";
    if (editor) {
      contextText = editor.getValue();
      console.log("Texto del contexto:", contextText);
    } else {
      console.log("No se encontr\xF3 ninguna vista Markdown activa.");
    }
    const messages = [
      { role: "system", content: "Eres un asistente experto en todas las \xE1reas de conocimiento. Para las f\xF3rmulas matem\xE1ticas siempre empleas la notaci\xF3n de KaTex con delimitadores $$ para displayed formulas y $ para inlines. Generas markdown compatible 100% con Obsidian: tareas, callouts, diagramas mermaid, markmap, etc." },
      { role: "user", content: `Contexto:
${contextText}

Pregunta:
${userMessage}` }
    ];
    console.log("ChatView.sendMessage: payload:", messages);
    const response = await this.plugin.gptService.fetchResponse(messages);
    spinnerContainer.empty();
    const markdownContainer = spinnerContainer.createEl("div");
    await import_obsidian.MarkdownRenderer.renderMarkdown(response, markdownContainer, "", this);
    const transferButton = spinnerContainer.createEl("button", { cls: "transfer-button" });
    transferButton.innerHTML = `
			<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" stroke="currentColor" 
				stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24">
				<rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
				<path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
			</svg>
		`;
    transferButton.addEventListener("click", () => this.insertInEditor(response));
  }
  insertInEditor(text) {
    const editor = this.plugin.getActiveMarkdownEditor();
    if (editor) {
      editor.replaceRange(text, editor.getCursor());
      new import_obsidian.Notice("Mensaje insertado en el editor.");
    } else {
      new import_obsidian.Notice("No se encontr\xF3 un editor activo.");
    }
  }
};
var ChatSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("API Key").setDesc("Introduce tu API Key de OpenAI").addText((text) => text.setPlaceholder("sk-...").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Modelo").setDesc("Elige el modelo de OpenAI").addDropdown((dropdown) => dropdown.addOptions({ "o3-mini": "o3-mini", "gpt-4o": "GPT-4o", "chatgpt-4o-latest": "ChatGPT" }).setValue(this.plugin.settings.model).onChange(async (value) => {
      this.plugin.settings.model = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
